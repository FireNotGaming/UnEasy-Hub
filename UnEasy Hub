-- Load the library (still pointing to ZezumeLib as per your initial link,
-- but we will call it OrionLib and use Orion's API structure)
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ZusumeLib(Slider)"))()

-- If the loaded library is nil or not a table, it means loading failed or it's not a standard library.
if not OrionLib or type(OrionLib) ~= "table" then
    warn("Failed to load the library or it's not in the expected format. Script will not run correctly.")
    return
end

-- Create the Window (using Orion's options table)
local Window = OrionLib:MakeWindow({
    Name = "UnEasy Hub",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "UnEasyHubConfig"
})

-- Create the Main Tab (using Orion's options table)
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://13516625108", -- Example icon
    PremiumOnly = false
})

-- Create the Character Section (using Orion's options table)
local CharacterSection = MainTab:AddSection({
    Name = "Character"
})

-- ========== State Variables ==========
-- Speed
local speedHackEnabled = false
local currentSpeedValue = 16 -- Default WalkSpeed
local originalWalkSpeed = 16 -- To reset to

-- JumpPower
local jumpPowerEnabled = false
local currentJumpPowerValue = 50 -- Default JumpPower
local originalJumpPower = 50 -- To reset to

-- ========== Utility Functions ==========
local function getPlayerCharacterHumanoid()
    local player = game:GetService("Players").LocalPlayer
    if player then
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                return player, character, humanoid
            end
        end
    end
    return nil, nil, nil
end

-- Function to initialize/update original character properties
local function initializeCharacterProperties()
    local _, _, humanoid = getPlayerCharacterHumanoid()
    if humanoid then
        -- Speed Properties
        if originalWalkSpeed == 16 and humanoid.WalkSpeed ~= 16 then
            originalWalkSpeed = humanoid.WalkSpeed
            print("Original WalkSpeed captured:", originalWalkSpeed)
        end
        if currentSpeedValue == 16 and humanoid.WalkSpeed ~= 16 then
             currentSpeedValue = humanoid.WalkSpeed
             print("Initial CurrentSpeedValue set to match actual:", currentSpeedValue)
        end

        -- JumpPower Properties
        if originalJumpPower == 50 and humanoid.JumpPower ~= 50 then
            originalJumpPower = humanoid.JumpPower
            print("Original JumpPower captured:", originalJumpPower)
        end
        if currentJumpPowerValue == 50 and humanoid.JumpPower ~= 50 then
             currentJumpPowerValue = humanoid.JumpPower
             print("Initial CurrentJumpPowerValue set to match actual:", currentJumpPowerValue)
        end
    end
end

-- Initial setup and on respawn
initializeCharacterProperties()
game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    task.wait(0.5) -- Wait for humanoid to be reliably present
    initializeCharacterProperties()
end)


-- ========== Speed Hack Controls ==========
CharacterSection:AddToggle({
    Name = "Speed Hack",
    Default = speedHackEnabled,
    Callback = function(value)
        speedHackEnabled = value
        print("Speed Hack Toggled: " .. tostring(speedHackEnabled))
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if not humanoid then return end
        if speedHackEnabled then
            humanoid.WalkSpeed = currentSpeedValue
        else
            humanoid.WalkSpeed = originalWalkSpeed
        end
    end
})

CharacterSection:AddSlider({
    Name = "Speed Amount",
    Min = 1,
    Max = 200,
    Default = currentSpeedValue,
    Increment = 1,
    ValueName = "studs/s",
    Callback = function(value)
        currentSpeedValue = value
        print("Speed Hack Value Changed: " .. tostring(currentSpeedValue))
        if speedHackEnabled then
            local _, _, humanoid = getPlayerCharacterHumanoid()
            if humanoid then
                humanoid.WalkSpeed = currentSpeedValue
            end
        end
    end
})

CharacterSection:AddButton({
    Name = "Reset Speed",
    Callback = function()
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid then
            humanoid.WalkSpeed = originalWalkSpeed
            currentSpeedValue = originalWalkSpeed
            print("Speed reset to: " .. tostring(originalWalkSpeed) .. " studs/s")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "Speed Reset", Content = "WalkSpeed reset to " .. tostring(originalWalkSpeed) .. " studs/s.", Time = 3 })
            end
        else
            print("Cannot reset speed: Player character or humanoid not found.")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "Error", Content = "Could not find player to reset speed.", Time = 3 })
            end
        end
    end
})

-- Add a small gap or separator if supported by the library, otherwise just list them
-- OrionLib might not have a dedicated separator, elements just stack.

-- ========== JumpPower Hack Controls ==========
CharacterSection:AddToggle({
    Name = "JumpPower Hack",
    Default = jumpPowerEnabled,
    Callback = function(value)
        jumpPowerEnabled = value
        print("JumpPower Hack Toggled: " .. tostring(jumpPowerEnabled))
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if not humanoid then return end
        if jumpPowerEnabled then
            humanoid.JumpPower = currentJumpPowerValue
        else
            humanoid.JumpPower = originalJumpPower
        end
    end
})

CharacterSection:AddSlider({
    Name = "JumpPower Amount",
    Min = 0,  -- Can jump with 0 power (effectively no jump)
    Max = 500, -- Reasonably high jump
    Default = currentJumpPowerValue,
    Increment = 1,
    ValueName = "power", -- Optional suffix
    Callback = function(value)
        currentJumpPowerValue = value
        print("JumpPower Value Changed: " .. tostring(currentJumpPowerValue))
        if jumpPowerEnabled then
            local _, _, humanoid = getPlayerCharacterHumanoid()
            if humanoid then
                humanoid.JumpPower = currentJumpPowerValue
            end
        end
    end
})

CharacterSection:AddButton({
    Name = "Reset JumpPower",
    Callback = function()
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid then
            humanoid.JumpPower = originalJumpPower
            currentJumpPowerValue = originalJumpPower
            print("JumpPower reset to: " .. tostring(originalJumpPower))
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "JumpPower Reset", Content = "JumpPower reset to " .. tostring(originalJumpPower) .. ".", Time = 3 })
            end
        else
            print("Cannot reset JumpPower: Player character or humanoid not found.")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "Error", Content = "Could not find player to reset JumpPower.", Time = 3 })
            end
        end
    end
})

-- ========== Continuous Enforcement Loop ==========
game:GetService("RunService").RenderStepped:Connect(function()
    if speedHackEnabled or jumpPowerEnabled then -- Only run if at least one hack is on
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid then
            if speedHackEnabled and humanoid.WalkSpeed ~= currentSpeedValue then
                humanoid.WalkSpeed = currentSpeedValue
            end
            if jumpPowerEnabled and humanoid.JumpPower ~= currentJumpPowerValue then
                humanoid.JumpPower = currentJumpPowerValue
            end
        end
    end
end)

-- ========== Initial Notification ==========
if OrionLib and OrionLib.MakeNotification then
    OrionLib:MakeNotification({
        Name = "UnEasy Hub",
        Content = "Successfully Loaded!",
        Image = "rbxassetid://13516625108",
        Time = 5
    })
else
    print("UnEasy Hub Loaded! (MakeNotification function not found in the loaded library, or library load failed)")
end

print("UnEasy Hub script initialized, written for OrionLib API.")
