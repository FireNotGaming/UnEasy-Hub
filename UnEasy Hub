-- Load the library (mocking OrionLib API, but using ZezumeLib source from your link)
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ZusumeLib(Slider)"))()

-- Check if the library loaded successfully
if not OrionLib or type(OrionLib) ~= "table" then
    warn("Failed to load the UI library or it's not in the expected table format. Script will not run correctly.")
    return -- Stop script execution if library failed to load
end

-- Create the Main Window for the UI
local Window = OrionLib:MakeWindow({
    Name = "UnEasy Hub",         -- Title of the window
    HidePremium = false,        -- An option often found in UI libraries (set to false)
    SaveConfig = true,          -- An option to enable saving UI settings (e.g., toggle states, slider values)
    ConfigFolder = "UnEasyHubConfig" -- Name of the folder where config might be saved
})

-- Create a Tab within the Window
local MainTab = Window:MakeTab({
    Name = "Main",              -- Name of the tab
    Icon = "rbxassetid://13516625108", -- Optional: An asset ID for an icon (Roblox logo example)
    PremiumOnly = false         -- If this tab should only be visible to "premium" users (not used here)
})

-- Create a Section within the "Main" Tab
local CharacterSection = MainTab:AddSection({
    Name = "Character"          -- Name of the section, e.g., "Character Mods"
})

-- ========== State Variables (To keep track of settings and original values) ==========

-- Speed Hack Variables
local speedHackEnabled = false      -- Is the speed hack currently active? (boolean: true/false)
local currentSpeedValue = 16        -- The speed value currently set by the slider (Roblox default WalkSpeed)
local originalWalkSpeed = 16        -- The player's WalkSpeed before any changes (Roblox default WalkSpeed)

-- JumpPower Hack Variables
local jumpPowerEnabled = false      -- Is the jump power hack currently active?
local currentJumpPowerValue = 50    -- The jump power value currently set by the slider (Roblox default JumpPower)
local originalJumpPower = 50        -- The player's JumpPower before any changes (Roblox default JumpPower)

-- Noclip Variable
local noclipEnabled = false         -- Is Noclip currently active?

-- Variables to store references to the slider UI objects themselves
local speedSliderObject
local jumpPowerSliderObject

-- ========== Utility Functions ==========

local function getPlayerCharacterHumanoid()
    local player = game:GetService("Players").LocalPlayer
    if player then
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            return player, character, humanoid
        end
    end
    return nil, nil, nil
end

local function setNoclipState(character, enabled)
    if not character then return end
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not enabled
            -- Optional: Add transparency for visual feedback
            -- part.Transparency = enabled and 0.5 or part.OriginalTransparency or 0 
            -- (Requires storing original transparency if parts have varying transparencies)
        end
    end
    -- For more robust noclip, you might also want to manage HumanoidStateType
    -- local humanoid = character:FindFirstChildOfClass("Humanoid")
    -- if humanoid then
    --     humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, not enabled)
    --     humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, not enabled)
    --     if enabled then
    --         -- humanoid:ChangeState(Enum.HumanoidStateType.Physics) -- Or another state that allows free movement
    --     else
    --         -- humanoid:ChangeState(Enum.HumanoidStateType.GettingUp) -- Or let it auto-recover
    --     end
    -- end
end


local function initializeCharacterPropertiesAndSliders()
    local player, character, humanoid = getPlayerCharacterHumanoid()
    if humanoid then
        -- Speed Properties
        if originalWalkSpeed == 16 and humanoid.WalkSpeed ~= 16 then
            originalWalkSpeed = humanoid.WalkSpeed
            print("Original WalkSpeed captured:", originalWalkSpeed)
        end
        if currentSpeedValue == 16 and humanoid.WalkSpeed ~= 16 then
             currentSpeedValue = humanoid.WalkSpeed
             print("Initial CurrentSpeedValue set to match actual:", currentSpeedValue)
             if speedSliderObject and speedSliderObject.SetValue then
                 speedSliderObject:SetValue(currentSpeedValue, false)
             end
        end

        -- JumpPower Properties
        if originalJumpPower == 50 and humanoid.JumpPower ~= 50 then
            originalJumpPower = humanoid.JumpPower
            print("Original JumpPower captured:", originalJumpPower)
        end
        if currentJumpPowerValue == 50 and humanoid.JumpPower ~= 50 then
             currentJumpPowerValue = humanoid.JumpPower
             print("Initial CurrentJumpPowerValue set to match actual:", currentJumpPowerValue)
             if jumpPowerSliderObject and jumpPowerSliderObject.SetValue then
                 jumpPowerSliderObject:SetValue(currentJumpPowerValue, false)
             end
        end
        
        -- Apply noclip if it was enabled and player respawned
        if noclipEnabled then
            setNoclipState(character, true)
        end

    else
        currentSpeedValue = 16
        originalWalkSpeed = 16
        currentJumpPowerValue = 50
        originalJumpPower = 50
    end
end


-- ========== Speed Hack UI Controls ==========
CharacterSection:AddToggle({
    Name = "Speed Hack",
    Default = speedHackEnabled,
    Callback = function(value)
        speedHackEnabled = value
        print("Speed Hack Toggled: " .. tostring(speedHackEnabled))
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if not humanoid then return end
        if speedHackEnabled then
            humanoid.WalkSpeed = currentSpeedValue
        else
            humanoid.WalkSpeed = originalWalkSpeed
        end
    end
})

speedSliderObject = CharacterSection:AddSlider({
    Name = "Speed Amount",
    Min = 1, Max = 200, Default = currentSpeedValue, Increment = 1, ValueName = "studs/s",
    Callback = function(value)
        currentSpeedValue = value
        print("Speed Hack Value Changed: " .. tostring(currentSpeedValue))
        if speedHackEnabled then
            local _, _, humanoid = getPlayerCharacterHumanoid()
            if humanoid then humanoid.WalkSpeed = currentSpeedValue end
        end
    end
})

CharacterSection:AddButton({
    Name = "Reset Speed",
    Callback = function()
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid then
            humanoid.WalkSpeed = originalWalkSpeed
            currentSpeedValue = originalWalkSpeed
            if speedSliderObject and speedSliderObject.SetValue then
                speedSliderObject:SetValue(originalWalkSpeed, false)
            end
            print("Speed reset to: " .. tostring(originalWalkSpeed) .. " studs/s")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "Speed Reset", Content = "WalkSpeed reset to " .. tostring(originalWalkSpeed) .. " studs/s.", Time = 3 })
            end
        else
            print("Cannot reset speed: Player character or humanoid not found.")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "Error", Content = "Could not find player to reset speed.", Time = 3 })
            end
        end
    end
})

-- ========== JumpPower Hack UI Controls ==========
CharacterSection:AddToggle({
    Name = "JumpPower Hack",
    Default = jumpPowerEnabled,
    Callback = function(value)
        jumpPowerEnabled = value
        print("JumpPower Hack Toggled: " .. tostring(jumpPowerEnabled))
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if not humanoid then return end
        if jumpPowerEnabled then
            humanoid.JumpPower = currentJumpPowerValue
        else
            humanoid.JumpPower = originalJumpPower
        end
    end
})

jumpPowerSliderObject = CharacterSection:AddSlider({
    Name = "JumpPower Amount",
    Min = 0, Max = 500, Default = currentJumpPowerValue, Increment = 1, ValueName = "power",
    Callback = function(value)
        currentJumpPowerValue = value
        print("JumpPower Value Changed: " .. tostring(currentJumpPowerValue))
        if jumpPowerEnabled then
            local _, _, humanoid = getPlayerCharacterHumanoid()
            if humanoid then humanoid.JumpPower = currentJumpPowerValue end
        end
    end
})

CharacterSection:AddButton({
    Name = "Reset JumpPower",
    Callback = function()
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid then
            humanoid.JumpPower = originalJumpPower
            currentJumpPowerValue = originalJumpPower
            if jumpPowerSliderObject and jumpPowerSliderObject.SetValue then
                jumpPowerSliderObject:SetValue(originalJumpPower, false)
            end
            print("JumpPower reset to: " .. tostring(originalJumpPower))
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "JumpPower Reset", Content = "JumpPower reset to " .. tostring(originalJumpPower) .. ".", Time = 3 })
            end
        else
            print("Cannot reset JumpPower: Player character or humanoid not found.")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({ Name = "Error", Content = "Could not find player to reset JumpPower.", Time = 3 })
            end
        end
    end
})

-- ========== Noclip UI Control ==========
CharacterSection:AddToggle({
    Name = "Noclip",
    Default = noclipEnabled,
    Callback = function(value)
        noclipEnabled = value
        print("Noclip Toggled: " .. tostring(noclipEnabled))
        local _, character, _ = getPlayerCharacterHumanoid()
        if character then
            setNoclipState(character, noclipEnabled)
        else
            print("Noclip: Character not found to apply state.")
        end
    end
})


-- ========== Initialization and Continuous Enforcement Logic ==========
initializeCharacterPropertiesAndSliders()

game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    task.wait(0.5)
    initializeCharacterPropertiesAndSliders() -- This will also re-apply noclip if it was enabled
end)

game:GetService("RunService").RenderStepped:Connect(function()
    local player, character, humanoid = getPlayerCharacterHumanoid()
    if not humanoid then return end -- Exit early if no humanoid

    -- Speed Enforcement
    if speedHackEnabled and humanoid.WalkSpeed ~= currentSpeedValue then
        humanoid.WalkSpeed = currentSpeedValue
    end

    -- JumpPower Enforcement
    if jumpPowerEnabled and humanoid.JumpPower ~= currentJumpPowerValue then
        humanoid.JumpPower = currentJumpPowerValue
    end
    
    -- Noclip Enforcement
    if noclipEnabled then
        -- Continuously ensure parts are non-collidable
        -- This is a bit more aggressive; could be optimized if needed
        -- by only calling setNoclipState if a part's CanCollide is unexpectedly true.
        -- For simplicity now, we just re-apply.
        if character then
             for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide == true then -- Only set if it's not already noclipping
                    part.CanCollide = false
                end
            end
        end
    end
end)

-- ========== Initial "Loaded" Notification ==========
if OrionLib and OrionLib.MakeNotification then
    OrionLib:MakeNotification({ Name = "UnEasy Hub", Content = "Successfully Loaded!", Image = "rbxassetid://13516625108", Time = 5 })
else
    print("UnEasy Hub Loaded! (MakeNotification function not found in the loaded library, or library load failed)")
end

print("UnEasy Hub script initialized, written for OrionLib API structure.")
