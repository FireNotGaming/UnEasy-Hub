-- Load ZezumeLib
local ZezumeLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ZusumeLib(Slider)"))()

-- Create the Window
local Window = ZezumeLib:CreateWindow("UnEasy Hub")

-- Create the Main Tab
local MainTab = Window:CreateTab("Main")

-- Create the Character Section
local CharacterSection = MainTab:CreateSection("Character")

-- Variables to store Speed Hack state
local speedHackEnabled = false
local currentSpeedValue = 16 -- Default WalkSpeed
local originalWalkSpeed = 16 -- To reset to

-- Get Local Player and Character (utility function)
local function getPlayerCharacterHumanoid()
    local player = game:GetService("Players").LocalPlayer
    if player then
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- Store original speed if not already stored and different
                if originalWalkSpeed == 16 and humanoid.WalkSpeed ~= 16 then
                    originalWalkSpeed = humanoid.WalkSpeed
                end
                return player, character, humanoid
            end
        end
    end
    return nil, nil, nil
end

-- Ensure originalWalkSpeed is set on first humanoid appearance if not default 16
local _, _, initialHumanoid = getPlayerCharacterHumanoid()
if initialHumanoid and initialHumanoid.WalkSpeed ~= 16 then
    originalWalkSpeed = initialHumanoid.WalkSpeed
    if currentSpeedValue == 16 then -- If slider default is 16, update it to actual current
        currentSpeedValue = originalWalkSpeed
        -- If ZezumeLib sliders can be updated after creation, you might need to call a method here
        -- For now, we assume the slider will be created with this potentially updated currentSpeedValue
    end
end


-- Create the Toggle for Speed Hack
-- This toggle will be named "Speed Hack" and controls the feature
CharacterSection:CreateToggle(
    "Speed Hack", -- Name of the toggle (this is the "Button To Toggle It On Off")
    speedHackEnabled, -- Default value (false = off)
    function(value) -- Callback function when toggled
        speedHackEnabled = value
        print("Speed Hack Toggled: " .. tostring(speedHackEnabled))
        
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if not humanoid then return end

        if speedHackEnabled then
            humanoid.WalkSpeed = currentSpeedValue
        else
            humanoid.WalkSpeed = originalWalkSpeed -- Reset to original speed
        end
    end
)

-- Create the Slider for Speed Hack value
-- This slider controls the *amount* for the "Speed Hack" feature
CharacterSection:CreateSlider(
    "Speed Amount", -- Name of the slider (describes what it controls)
    1, -- Minimum speed value
    200, -- Maximum speed value
    currentSpeedValue, -- Default/current speed value
    1, -- Increment (step)
    function(value) -- Callback function when slider value changes
        currentSpeedValue = value
        print("Speed Hack Value Changed: " .. tostring(currentSpeedValue))
        
        if speedHackEnabled then -- Only apply if the hack is currently enabled
            local _, _, humanoid = getPlayerCharacterHumanoid()
            if humanoid then
                humanoid.WalkSpeed = currentSpeedValue
            end
        end
    end,
    "studs/s" -- Suffix to display next to the value (optional)
)

-- Game loop to continuously apply speed if character respawns or if state is managed externally
-- This also helps if the game tries to reset walkspeed
game:GetService("RunService").RenderStepped:Connect(function()
    if speedHackEnabled then
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid and humanoid.WalkSpeed ~= currentSpeedValue then
            humanoid.WalkSpeed = currentSpeedValue
        end
    end
end)

-- Notification (optional, for user feedback that script ran)
ZezumeLib:Notify("UnEasy Hub Loaded!", "Welcome!", 5) -- Assuming a Notify function exists

print("UnEasy Hub script initialized with ZezumeLib.")

--[[
Notes on interpretation for "A Slider With A Button To Toggle It On Of Off, Name: Speed Hack":
- I've interpreted "Speed Hack" as the name of the *feature*.
- The "Button To Toggle It On Off Off" is the `CreateToggle` element, which I've named "Speed Hack".
- The "Slider" is the `CreateSlider` element, which I've named "Speed Amount" to clarify its purpose relative to the "Speed Hack" feature.
- If you meant the slider UI element *itself* should be named "Speed Hack", you could change the `CreateSlider` name to "Speed Hack" and perhaps the `CreateToggle` name to "Enable Speed".
  The current naming is generally more intuitive for users (feature name on the toggle, value descriptor on the slider).
]]
