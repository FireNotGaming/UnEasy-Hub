-- Load the library (still pointing to ZezumeLib as per your initial link,
-- but we will call it OrionLib and use Orion's API structure)
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ZusumeLib(Slider)"))()

-- If the loaded library is nil or not a table, it means loading failed or it's not a standard library.
if not OrionLib or type(OrionLib) ~= "table" then
    warn("Failed to load the library or it's not in the expected format. Script will not run correctly.")
    return
end

-- Create the Window (using Orion's options table)
local Window = OrionLib:MakeWindow({
    Name = "UnEasy Hub",
    HidePremium = false, -- Default Orion option
    SaveConfig = true,   -- Default Orion option
    ConfigFolder = "UnEasyHubConfig" -- Optional: folder name for saving settings
})

-- Create the Main Tab (using Orion's options table)
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://13516625108", -- Example icon (Roblox logo, can be changed or removed)
    PremiumOnly = false
})

-- Create the Character Section (using Orion's options table)
local CharacterSection = MainTab:AddSection({
    Name = "Character"
})

-- Variables to store Speed Hack state
local speedHackEnabled = false
local currentSpeedValue = 16 -- Default WalkSpeed
local originalWalkSpeed = 16 -- To reset to

-- Get Local Player and Character (utility function)
local function getPlayerCharacterHumanoid()
    local player = game:GetService("Players").LocalPlayer
    if player then
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- Store original speed if not already stored and different
                if originalWalkSpeed == 16 and humanoid.WalkSpeed ~= 16 then
                    originalWalkSpeed = humanoid.WalkSpeed
                end
                return player, character, humanoid
            end
        end
    end
    return nil, nil, nil
end

-- Ensure originalWalkSpeed is set on first humanoid appearance if not default 16
local _, _, initialHumanoid = getPlayerCharacterHumanoid()
if initialHumanoid and initialHumanoid.WalkSpeed ~= 16 then
    originalWalkSpeed = initialHumanoid.WalkSpeed
    if currentSpeedValue == 16 then -- If slider default is 16, update it to actual current
        currentSpeedValue = originalWalkSpeed
    end
end

-- Create the Toggle for Speed Hack (using Orion's options table)
-- This toggle will be named "Speed Hack" and controls the feature
CharacterSection:AddToggle({
    Name = "Speed Hack", -- Name of the toggle (this is the "Button To Toggle It On Off")
    Default = speedHackEnabled, -- Default value (false = off)
    Callback = function(value) -- Callback function when toggled
        speedHackEnabled = value
        print("Speed Hack Toggled: " .. tostring(speedHackEnabled))
        
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if not humanoid then return end

        if speedHackEnabled then
            humanoid.WalkSpeed = currentSpeedValue
        else
            humanoid.WalkSpeed = originalWalkSpeed -- Reset to original speed
        end
    end
})

-- Create the Slider for Speed Hack value (using Orion's options table)
-- This slider controls the *amount* for the "Speed Hack" feature
CharacterSection:AddSlider({
    Name = "Speed Amount", -- Name of the slider (describes what it controls)
    Min = 1, -- Minimum speed value
    Max = 200, -- Maximum speed value
    Default = currentSpeedValue, -- Default/current speed value
    Increment = 1, -- Increment (step)
    ValueName = "studs/s", -- Suffix to display next to the value (Orion's equivalent to suffix)
    Callback = function(value) -- Callback function when slider value changes
        currentSpeedValue = value
        print("Speed Hack Value Changed: " .. tostring(currentSpeedValue))
        
        if speedHackEnabled then -- Only apply if the hack is currently enabled
            local _, _, humanoid = getPlayerCharacterHumanoid()
            if humanoid then
                humanoid.WalkSpeed = currentSpeedValue
            end
        end
    end
})

-- Game loop to continuously apply speed if character respawns or if state is managed externally
-- This also helps if the game tries to reset walkspeed
game:GetService("RunService").RenderStepped:Connect(function()
    if speedHackEnabled then
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid and humanoid.WalkSpeed ~= currentSpeedValue then
            humanoid.WalkSpeed = currentSpeedValue
        end
    end
end)

-- Notification (optional, for user feedback that script ran, using Orion's API)
-- Check if MakeNotification function exists in the loaded library before calling
if OrionLib and OrionLib.MakeNotification then
    OrionLib:MakeNotification({
        Name = "UnEasy Hub", -- Title of the notification
        Content = "Successfully Loaded!", -- Message content
        Image = "rbxassetid://13516625108", -- Optional image (Roblox logo again)
        Time = 5 -- Duration in seconds
    })
else
    print("UnEasy Hub Loaded! (MakeNotification function not found in the loaded library, or library load failed)")
end

print("UnEasy Hub script initialized, written for OrionLib API.")

--[[
Key differences when using Orion's API structure:
- UI elements are created using methods like `MakeWindow`, `MakeTab`, `AddSection`, `AddToggle`, `AddSlider`.
- These methods take a single argument: an options table (e.g., `{ Name = "...", Default = ... }`).
- Slider suffix is often handled by a `ValueName` or similar property in the options table.
- Notifications also use an options table via `MakeNotification`.
]]
