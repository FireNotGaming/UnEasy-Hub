-- Load the library (still pointing to ZezumeLib as per your initial link,
-- but we will call it OrionLib and use Orion's API structure)
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ZusumeLib(Slider)"))()

-- If the loaded library is nil or not a table, it means loading failed or it's not a standard library.
if not OrionLib or type(OrionLib) ~= "table" then
    warn("Failed to load the library or it's not in the expected format. Script will not run correctly.")
    return
end

-- Create the Window (using Orion's options table)
local Window = OrionLib:MakeWindow({
    Name = "UnEasy Hub",
    HidePremium = false, -- Default Orion option
    SaveConfig = true,   -- Default Orion option
    ConfigFolder = "UnEasyHubConfig" -- Optional: folder name for saving settings
})

-- Create the Main Tab (using Orion's options table)
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://13516625108", -- Example icon (Roblox logo, can be changed or removed)
    PremiumOnly = false
})

-- Create the Character Section (using Orion's options table)
local CharacterSection = MainTab:AddSection({
    Name = "Character"
})

-- Variables to store Speed Hack state
local speedHackEnabled = false
local currentSpeedValue = 16 -- Default WalkSpeed, will be updated if actual speed is different
local originalWalkSpeed = 16 -- To reset to, will be updated if actual speed is different

-- Get Local Player and Character (utility function)
local function getPlayerCharacterHumanoid()
    local player = game:GetService("Players").LocalPlayer
    if player then
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- Store original speed if not already stored or if it changed from default 16
                if originalWalkSpeed == 16 and humanoid.WalkSpeed ~= 16 then
                    originalWalkSpeed = humanoid.WalkSpeed
                    print("Original WalkSpeed captured:", originalWalkSpeed)
                end
                return player, character, humanoid
            end
        end
    end
    return nil, nil, nil
end

-- Ensure originalWalkSpeed is set on first humanoid appearance if not default 16
-- and update currentSpeedValue to match if it's still the initial default
local function initializeSpeeds()
    local _, _, initialHumanoid = getPlayerCharacterHumanoid()
    if initialHumanoid then
        if originalWalkSpeed == 16 and initialHumanoid.WalkSpeed ~= 16 then
            originalWalkSpeed = initialHumanoid.WalkSpeed
            print("Initial Original WalkSpeed set to:", originalWalkSpeed)
        end
        -- If currentSpeedValue is still the script's default (16) and the actual speed is different,
        -- update currentSpeedValue to reflect the actual current speed before any hacks.
        if currentSpeedValue == 16 and initialHumanoid.WalkSpeed ~= 16 then
             currentSpeedValue = initialHumanoid.WalkSpeed
             print("Initial CurrentSpeedValue set to match actual:", currentSpeedValue)
        end
    end
end
initializeSpeeds()
game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function()
    task.wait(0.5) -- Wait for humanoid to be reliably present
    initializeSpeeds()
end)


-- Create the Toggle for Speed Hack (using Orion's options table)
CharacterSection:AddToggle({
    Name = "Speed Hack",
    Default = speedHackEnabled,
    Callback = function(value)
        speedHackEnabled = value
        print("Speed Hack Toggled: " .. tostring(speedHackEnabled))
        
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if not humanoid then return end

        if speedHackEnabled then
            humanoid.WalkSpeed = currentSpeedValue
        else
            humanoid.WalkSpeed = originalWalkSpeed -- Reset to original speed
        end
    end
})

-- Create the Slider for Speed Hack value (using Orion's options table)
CharacterSection:AddSlider({
    Name = "Speed Amount",
    Min = 1,
    Max = 200,
    Default = currentSpeedValue, -- Uses the potentially updated currentSpeedValue
    Increment = 1,
    ValueName = "studs/s",
    Callback = function(value)
        currentSpeedValue = value
        print("Speed Hack Value Changed: " .. tostring(currentSpeedValue))
        
        if speedHackEnabled then -- Only apply if the hack is currently enabled
            local _, _, humanoid = getPlayerCharacterHumanoid()
            if humanoid then
                humanoid.WalkSpeed = currentSpeedValue
            end
        end
    end
    -- Note: To make the slider visually update when "Reset Speed" is pressed,
    -- the OrionLib would need to support updating a slider's value from its config variable,
    -- or you'd need a direct reference to the slider object and an update method.
    -- Changing `currentSpeedValue` will make the *logic* use the reset speed.
})

-- Create the Button to Reset Speed (using Orion's options table)
CharacterSection:AddButton({
    Name = "Reset Speed",
    Callback = function()
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid then
            humanoid.WalkSpeed = originalWalkSpeed
            currentSpeedValue = originalWalkSpeed -- Update the variable that backs the slider
            
            -- If the speed hack is currently enabled, it will now enforce the originalWalkSpeed
            -- because the RenderStepped loop uses currentSpeedValue.
            -- If the toggle is off, the speed is reset, and currentSpeedValue is now originalWalkSpeed.

            print("Speed reset to: " .. tostring(originalWalkSpeed) .. " studs/s")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({
                    Name = "Speed Reset",
                    Content = "WalkSpeed reset to " .. tostring(originalWalkSpeed) .. " studs/s.",
                    Time = 3
                })
            end
        else
            print("Cannot reset speed: Player character or humanoid not found.")
            if OrionLib and OrionLib.MakeNotification then
                OrionLib:MakeNotification({
                    Name = "Error",
                    Content = "Could not find player to reset speed.",
                    Time = 3
                })
            end
        end
    end
})

-- Game loop to continuously apply speed if character respawns or if state is managed externally
game:GetService("RunService").RenderStepped:Connect(function()
    if speedHackEnabled then
        local _, _, humanoid = getPlayerCharacterHumanoid()
        if humanoid and humanoid.WalkSpeed ~= currentSpeedValue then
            humanoid.WalkSpeed = currentSpeedValue
        end
    end
end)

-- Notification
if OrionLib and OrionLib.MakeNotification then
    OrionLib:MakeNotification({
        Name = "UnEasy Hub",
        Content = "Successfully Loaded!",
        Image = "rbxassetid://13516625108",
        Time = 5
    })
else
    print("UnEasy Hub Loaded! (MakeNotification function not found in the loaded library, or library load failed)")
end

print("UnEasy Hub script initialized, written for OrionLib API.")
